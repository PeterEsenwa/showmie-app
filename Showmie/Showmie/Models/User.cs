using System;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Showmie.Models
{
    public class User
    {
        /// <summary>
        /// A user's Id in the database
        /// </summary>
        /// <remarks>
        /// It is autogenerated in the database table, so should not to be set for new users
        /// </remarks>
        public int Id { get; set; }

        /// <summary>
        /// A unique name for a user
        /// </summary>
        public string Username { get; set; }

        /// <summary>
        /// A user's email. Must be unique in the database
        /// </summary>
        public string Email { get; set; }

        /// <summary>
        /// A user's date of birth
        /// </summary>
        public DateTime DateOfBirth { get; set; }

        public string Gender { get; set; }
        public string Country { get; set; }
        public string Following { get; set; }
        public string Followers { get; set; }
        public string ProfilePicture { get; set; }
        public string ProfileCover { get; set; }
        public string PhoneNo { get; set; }

        /// <summary>
        /// Shows if users phone number has been verified, must be "Yes" or "No"
        /// </summary>
        public string PhoneNoVerification { get; set; }
        public string State { get; set; }
        public int IntFollowers { get; set; }
        public string Password { get; set; }
        public string[] Categories { get; set; }
        public string CreatedAt { get; set; }
        public string ConfirmationToken { get; set; }
        private int IsFullyRegistered { get; set; }
        public AdminRoles AdminRole { get; private set; } = AdminRoles.None;

        /// <summary>
        /// Setter method for AdminRole
        /// </summary>
        /// <param name="value"></param>
        /// <remarks>Checks if passed value is defined in AdminRoles</remarks>
        public void SetAdminRole(int value)
        {
            if (Enum.IsDefined(typeof(AdminRoles), value))
            {
                AdminRole = (AdminRoles)value;
            }
            else
            {
                throw new IndexOutOfRangeException("Specified value for accountType is not defined in AdminRoles enum");
            }
        }

        public AccountTypes AccountType { get; set; }

        public void SetAccountType(int value)
        {
            if (Enum.IsDefined(typeof(AccountTypes), value))
            {
                AccountType = (AccountTypes)value;
            }
            else
            {
                throw new IndexOutOfRangeException("Specified value for accoutnType is not defined in AccountTypes enum");
            }
        }

        public string LastName { get; internal set; }
        public string FirstName { get; internal set; }

        //public bool PreserveSignin { get; set; }
        //public List<Notification> Notifications { get; set; }

        public enum AccountTypes
        {
            Null = 0,
            Enthusiast = 1,
            Professional = 2
        }

        //TODO: Remove GetAccountType() function if not needed after testing UserService.UserSignup()

        /// <summary>
        /// Helper funtion to convert AccountTypes values to the appropiate  string representation
        /// </summary>
        /// <param name="accountType"></param>
        /// <returns>string</returns>
        public static string GetAccountType(AccountTypes accountType)
        {
            switch (accountType)
            {
                case AccountTypes.Null:
                    return "enthusiast";
                case AccountTypes.Enthusiast:
                    return "enthusiast";
                case AccountTypes.Professional:
                    return "professional";
                default:
                    return "enthusiast";
            }
        }

        /// <summary>
        /// Enumeration of possible Admin role levels for users
        /// </summary>
        public enum AdminRoles
        {
            None = 0,
            Low = 1,
            Medium = 2,
            High = 3
        }

        public User()
        {
        }

        public User(string username, string email, string password, int adminRole, int accountType)
        {
            Username = username;
            Email = email;
            Password = password;
            SetAdminRole(adminRole);
            SetAccountType(accountType);
        }

        //public bool IsValid()
        //{
        //    if (!ID.Equals(0) && !AccountType.Equals(AccountTypes.Null) && !string.IsNullOrWhiteSpace(Gender) && !string.IsNullOrWhiteSpace(Fullname) && !string.IsNullOrWhiteSpace(Username)
        //        && !string.IsNullOrWhiteSpace(Email) && !string.IsNullOrWhiteSpace(Country) && !string.IsNullOrWhiteSpace(DateOfBirth) && !string.IsNullOrWhiteSpace(PhoneNo) 
        //        && !string.IsNullOrWhiteSpace(DateOfBirth) && !string.IsNullOrWhiteSpace(DateOfBirth) && !string.IsNullOrWhiteSpace(DateOfBirth) && !string.IsNullOrWhiteSpace(DateOfBirth) )
        //    {

        //    }
        //}
    }
}
